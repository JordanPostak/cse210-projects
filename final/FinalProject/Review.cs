using System;
using System.Collections.Generic;
using System.IO;

namespace InspireStone
{
    class Review : Program
    {

        protected override void InspireSelect()
        // (overridden from Program) prompts the user to select from a list of inspirations generated by _inspireList (if _step is equal to 6. Sets the selection as _select.
        {
            bool hasInspiration = false;

            // Check if there are any inspirations with step 3
            foreach (string inspire in _inspireList)
            {
                string[] parts = inspire.Split(new string[] { "///" }, StringSplitOptions.None);
                int step;
                if (Int32.TryParse(parts[0], out step))
                {
                    if (step == 6)
                    {
                        hasInspiration = true;
                        break;
                    }
                }
            }

            if (!hasInspiration)
            {
                Console.WriteLine("There are no inspirations to ponder.");
                return;
            }

            Console.WriteLine("\nSelect an inspiration:");
            for (int i = 0; i < _inspireList.Count; i++)
            {
                string[] parts = _inspireList[i].Split(new string[] { "///" }, StringSplitOptions.None);
                int step;
                if (Int32.TryParse(parts[0], out step))
                {
                    if (step == 6)
                    {
                        Console.WriteLine($"{i + 1}. {parts[2]}");
                    }
                }
            }

            string input = Console.ReadLine();
            int selection;
            if (Int32.TryParse(input, out selection))
            {
                // Check if selection is within range
                bool isValidSelection = false;
                for (int i = 0; i < _inspireList.Count; i++)
                {
                    string[] parts = _inspireList[i].Split(new string[] { "///" }, StringSplitOptions.None);
                    int step;
                    if (Int32.TryParse(parts[0], out step))
                    {
                        if (step == 6 && selection == i + 1)
                        {
                            _index = i;
                            _select = _inspireList[_index];
                            Console.WriteLine($"Selected inspiration: {_select}");
                            Inspire.InspireSeperate();
                            isValidSelection = true;
                            break;
                        }
                    }
                }
                if (!isValidSelection)
                {
                    Console.WriteLine("Invalid input, please try again.");
                }
            }
            else
            {
                Console.WriteLine("Invalid input, please try again.");
            }
        }

        public void Reviewed()
        {
            // Ask User if they have prayed and reviewed the Inspiration with the creator
            Console.WriteLine($"Have you prayed and reviewed the Inspiration '{_name}' with the Creator? (yes/no)");
            string answer = Console.ReadLine().ToLower();
            // if yes then:
            if (answer == "yes")
            {
                _review = "Reviewed";
                StepUpgrade();
                Inspire.SaveInspiration();
                Inspire.AddLuminosity();
                Inspire.SaveInspireList();
            // if no then return
            }
            else if (answer == "no")
            {
                Console.WriteLine("OK, please try again later.");
                return;
            }
            else
            {
                Console.WriteLine("Invalid input. Please try again later.");
            }
        }
        public void Reviewing()
        {
            InspireSelect();
            Inspire.DisplayInspiration();
            Reviewed();
            Record.Recording();
        }

        protected override void Menu()
        {

            while (true)
            {
                // Display luminosity score
                Inspire.DisplayLuminosity();

                Console.WriteLine("Select an option:");
                Console.WriteLine("1. Review inspirationon");
                Console.WriteLine("2. Return to Main Menu");

                string input = Console.ReadLine();
                int selection;
                if (Int32.TryParse(input, out selection))
                {
                    switch (selection)
                    {
                        case 1:
                            Reviewing();
                            break;
                        case 2:
                            return;
                        default:
                            Console.WriteLine("Invalid input, please try again.");
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("Invalid input, please try again.");
                }
            } 
        }

        public void Run()
        {
            // Implement behavior to bring up menu and initiate Review class
            Menu();
        }
    }
}