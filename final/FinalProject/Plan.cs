using System;
using System.Collections.Generic;
using System.IO;

namespace InspireStone
{
    class Plan : Program
    {
        private string _selectLink = "";
        private int _stepLink = 0;
        private string _inspireLink = "";
        private string _nameLink = "";
        private string _feelLink = "";
        private string _typeLink = "";
        private string _scriptLink = "";
        private string _wordLink = "";
        private string _planLink = "";
        private string _linkLink = "";
        private string _actLink = "";
        private string _reviewLink = "";
        private string _recordLink = "";
        private int _indexLink = -1;

        protected override void InspireSelect()
        // (overridden from Program) prompts the user to select from a list of inspirations generated by _inspireList (if _step is equal to 4 and the _type is not pearl). Sets the selection as _select.
        {
            bool hasInspiration = false;

            // Check if there are any inspirations with step 4 and non-"pearl" type
            foreach (string inspire in _inspireList)
            {
                string[] parts = inspire.Split(new string[] { "///" }, StringSplitOptions.None);
                int step;
                string type;
                if (Int32.TryParse(parts[0], out step))
                {
                    type = parts[4];
                    if (step == 4 && type != "Pearl")
                    {
                        hasInspiration = true;
                        break;
                    }
                }
            }

            if (!hasInspiration)
            {
                Console.WriteLine("There are no inspirations to ponder.");
                return;
            }

            Console.WriteLine("\nSelect an inspiration:");
            for (int i = 0; i < _inspireList.Count; i++)
            {
                string[] parts = _inspireList[i].Split(new string[] { "///" }, StringSplitOptions.None);
                int step;
                string type;
                if (Int32.TryParse(parts[0], out step))
                {
                    type = parts[4];
                    if (step == 4 && type != "Pearl")
                    {
                        Console.WriteLine($"{i + 1}. {parts[2]}");
                    }
                }
            }

            string input = Console.ReadLine();
            int selection;
            if (Int32.TryParse(input, out selection))
            {
                // Check if selection is within range
                bool isValidSelection = false;
                for (int i = 0; i < _inspireList.Count; i++)
                {
                    string[] parts = _inspireList[i].Split(new string[] { "///" }, StringSplitOptions.None);
                    int step;
                    if (Int32.TryParse(parts[0], out step))
                    {
                        if (step == 4 && selection == i + 1)
                        {
                            _index = i;
                            _select = _inspireList[_index];
                            Console.WriteLine($"Selected inspiration: {_select}");
                            Inspire.InspireSeperate();
                            isValidSelection = true;
                            break;
                        }
                    }
                }
                if (!isValidSelection)
                {
                    Console.WriteLine("Invalid input, please try again.");
                }
            }
            else
            {
                Console.WriteLine("Invalid input, please try again.");
            }
        }

         protected override void AddInspire()
        {
            // Prompts user for inspiration text and sets it to “_inspire”.
            Console.Write("Enter the inspiration text: ");
            _inspireLink = Console.ReadLine();

            // Prompts user or inspiration name and sets it to “_name”.
            Console.Write("Enter the inspiration name: ");
            _nameLink = Console.ReadLine();

            // Prompts user to select associated feelings from _feellist.
            _feelLink = Feelings.GetFeel(_feelList);

            // Sets “_step” as 3
            _stepLink = 3;

            // Sets “_script” as “Undefined“
            _scriptLink = "Undefined";

            // Sets “_word” as “Undefined“
            _wordLink = "Undefined";

            // Sets “_link” as “Undefined“
            _linkLink = "_name";

            // Sets “act” as “Undefined“
            _actLink = "Undefined";

            // Sets “_review” as “Undefined“
            _reviewLink = "Undefined";

            // Creates new inspiration in this as: _step, _inspire, _name, _feel, _type, _script, _word, _plan, _link, _act, _review. All separated by “///”.
            string newInspirationString = $"{_stepLink}///{_inspireLink}///{_nameLink}///{_feelLink}///{_typeLink}///{_scriptLink}///{_wordLink}///{_planLink}///{_linkLink}///{_actLink}///{_reviewLink}";

            // Appends to _inspireList.
            if (!_inspireList.Contains(newInspirationString))
            {
                _inspireList.Add(newInspirationString);
                Console.WriteLine($"Added '{_inspireLink}' to the inspiration list.");
            }
            else
            {
                Console.WriteLine($"'{_inspireLink}' is already in the inspiration list.");
            }

            // Sets as _select.
            _selectLink = newInspirationString;

            // Calls AddLuminosity()
            Inspire.AddLuminosity();
            
            //takes plan and splits it by "," then splits the second one to get the numbers by themsleves, an example would be "[1/1]" then adds 1 to the later digit, example would be "[1/2]"
            // Splits the plan string by "," to get the first and second parts.
            string[] planParts = _plan.Split(',');

            // Gets the second part of the plan string.
            string secondPart = planParts[1].Trim();

            // Removes the "[" and "]" characters from the second part.
            secondPart = secondPart.Replace("[", "").Replace("]", "");
            
            // Splits the second part by "/" to get the two digits.
            string[] digits = secondPart.Split('/');

            // Parses the second digit to an integer and adds 1 to it.
            int newDigit = int.Parse(digits[0]);

            // Constructs the new second part with the updated digit.
            string newSecondPart = $"[{digits[0]}/{newDigit}]";

            // Constructs the updated plan string.
            _plan = $"{planParts[0]}, {newSecondPart}";
        }

        public void Planit()
        {
            // Prompts the user to plan to accomplish the selected inspiration.
            if (_type == "Task")
            {
                // If it is a Task, asks the user to pick a date when it is completed, sets the user input as _plan.
                Console.Write("Enter the date when the task will be completed (MM/DD/YYYY): ");
                string taskDate = Console.ReadLine();
                _plan = taskDate;
                StepUpgrade();
            }
            else if (_type == "Habit")
            {
                // If it is a Habit, ask user how often saves to frequent.
                Console.Write("How often do you want to do this habit? (e.g. daily, weekly, etc.): ");
                string frequent = Console.ReadLine();

                // Then askes the user how long, saves to period.
                Console.Write("How long do you want to keep doing this habit? (e.g. 30 days, 6 weeks, etc.): ");
                string period = Console.ReadLine();

                // Puts frequent and period together and sets as _plan.
                _plan = $"{frequent} for {period}";
                StepUpgrade();
            }
            else if (_type == "Mission")
            {
                // If it is a Mission, asks the user when the mission is due by.
                Console.Write("Enter the due date for the mission (MM/DD/YYYY): ");
                string date = Console.ReadLine();

                // Saves the date picked by the user to date.
                _plan = date;

                // Asks the user if it needs to be broken down further.
                Console.Write("Do you need to break down the mission into smaller inspirations? (Y/N): ");
                string answer = Console.ReadLine().ToLower();

                if (answer == "y")
                {
                    // If yes then call add inspire.
                    AddInspire();

                    // After inspiration is added, keep asking the user if another one is needed for inspiration:_name.
                    while (true)
                    {
                        Console.Write("Do you want to add another inspiration for this mission? (Y/N): ");
                        string addAnother = Console.ReadLine().ToLower();

                        if (addAnother == "y")
                        {
                            AddInspire();
                        }
                        else
                        {
                            break;
                        }
                    }
                }
                else
                {
                    // If no, then sets "{date},[1/1]" as _plan.
                    _plan = $"{date},[1/1]";
                    StepUpgrade();
                    Inspire.AddLuminosity();
                }
            }
        }

        public void SetPlan()
        {
            InspireSelect();
            Planit();
            Inspire.SaveInspiration();
            Inspire.SaveInspireList();
        }
        protected override void Menu()
        {

            while (true)
            {
                // Display luminosity score
                Inspire.DisplayLuminosity();

                Console.WriteLine("Select an option:");
                Console.WriteLine("1. Plan out an inspiration");
                Console.WriteLine("2. Return to Main Menu");

                string input = Console.ReadLine();
                int selection;
                if (Int32.TryParse(input, out selection))
                {
                    switch (selection)
                    {
                        case 1:
                            SetPlan();
                            break;
                        case 2:
                            return;
                        default:
                            Console.WriteLine("Invalid input, please try again.");
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("Invalid input, please try again.");
                }
            } 
        }

        public void Run()
        {
            Menu();
        }
    }
}